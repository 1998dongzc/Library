<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dzc.springboot.dao.BookMapper">
    <resultMap id="BaseResultMap" type="com.dzc.springboot.model.Book">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="author" jdbcType="VARCHAR" property="author"/>
        <result column="price" jdbcType="VARCHAR" property="price"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="room" jdbcType="VARCHAR" property="room"/>
        <result column="num" jdbcType="VARCHAR" property="num"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, name, author, price, status, room, num
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from book
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from book
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.dzc.springboot.model.Book">
    insert into book ( name, author,
      price, status, room, 
      num)
    values ( #{name,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR},
      #{price,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{room,jdbcType=VARCHAR}, 
      #{num,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.dzc.springboot.model.Book">
        insert into book
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="author != null">
                author,
            </if>
            <if test="price != null">
                price,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="room != null">
                room,
            </if>
            <if test="num != null">
                num,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="author != null">
                #{author,jdbcType=VARCHAR},
            </if>
            <if test="price != null">
                #{price,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="room != null">
                #{room,jdbcType=VARCHAR},
            </if>
            <if test="num != null">
                #{num,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.dzc.springboot.model.Book">
        update book
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="author != null">
                author = #{author,jdbcType=VARCHAR},
            </if>
            <if test="price != null">
                price = #{price,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="room != null">
                room = #{room,jdbcType=VARCHAR},
            </if>
            <if test="num != null">
                num = #{num,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.dzc.springboot.model.Book">
    update book
    set name = #{name,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      price = #{price,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      room = #{room,jdbcType=VARCHAR},
      num = #{num,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <!--每次查询10条数据 更具当前得页面序数-->
    <select id="selectBooks" parameterType="java.lang.Integer" resultType="com.dzc.springboot.model.Book">
    select id,name,author,price,status,room,num from book limit ${((pageno-1)*10)},10;
  </select>
    <select id="selctCount" resultType="java.lang.Integer">
    select count(*) from book;
  </select>
    <select id="selectBookBySelective" resultType="com.dzc.springboot.model.Book">
        select id,name,author,price,status,room,num from book
        <where>
            <if test="name != null and name !='' ">
                name like concat('%',#{name},'%')
            </if>
            <if test="author != null and author !='' ">
                and author like concat('%',#{author},'%')
            </if>
            <if test="room != null and room!='' ">
                and room like #{room}
            </if>
        </where>
        limit ${((pageno-1)*10)},10
    </select>
    <select id="selectBookCountBySelective" resultType="java.lang.Integer">
        select count(*) from book
        <where>
            <if test="name != null and name !='' ">
                name like concat('%',#{name},'%')
            </if>
            <if test="author != null and author !='' ">
                and author like concat('%',#{author},'%')
            </if>
            <if test="room != null and room!='' ">
                and room like #{room}
            </if>
        </where>
    </select>
    <select id="selectOneBook" parameterType="com.dzc.springboot.model.Book" resultType="com.dzc.springboot.model.Book">
        select
            id,name,author,price,status,room,num
        from book
        where
            name=#{name} and author=#{author} and price=#{price} and status=#{price} and room=#{room} and num=#{num}
    </select>
    <select id="selectBooksnopage" resultType="com.dzc.springboot.model.Book">
        select id,name,author,price,status,room,num from book
        <where>
            <if test="name != null and name !='' ">
                name like concat('%',#{name},'%')
            </if>
            <if test="author != null and author !='' ">
                and author like concat('%',#{author},'%')
            </if>
            <if test="room != null and room!='' ">
                and room like #{room}
            </if>
        </where>
    </select>

</mapper>